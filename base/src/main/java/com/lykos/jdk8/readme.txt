jdk8 新特性
1.接口的默认方法
    Java 8允许我们给接口添加一个非抽象的方法实现，只需要使用 default关键字即可，这个特征又叫做扩展方法
2.Lambda表达式
3.函数式接口
    每一个lambda表达式都对应一个类型，通常是接口类型。而“函数式接口”是指仅仅只包含一个抽象方法的接口，每一个该类型的lambda表达式都会被匹配到这个抽象方法。
    因为 默认方法 不算抽象方法，所以你也可以给你的函数式接口添加默认方法。
    确保你的接口一定达到这个要求，你只需要给你的接口添加 @FunctionalInterface 注解
4.方法与构造函数引用
    Java 8 允许你使用 :: 关键字来传递方法或者构造函数引用，上面的代码展示了如何引用一个静态方法，我们也可以引用一个对象的方法
5.常用接口
    5.a Supplier接口返回一个任意范型的值
    5.b Consumer 接口表示执行在单个参数上的操作
    5.c Optional被定义为一个简单的容器，其值可能是null或者不是null。
        在Java 8之前一般某个函数应该返回非空对象但是偶尔却可能返回了null，而在Java 8中，不推荐你返回null而是返回Optional
    5.d Function 接口有一个参数并且返回一个结果，并附带了一些可以和其他函数组合的默认方法（compose, andThen）
    5.e Stream 表示能应用在一组元素上一次执行的操作序列。Stream 操作分为中间操作或者最终操作两种，最终操作返回一特定类型的计算结果，
               而中间操作返回Stream本身，这样你就可以将多个操作依次串起来。
        Stream 的创建需要指定一个数据源，比如 java.util.Collection的子类，List或者Set， Map不支持。
        Stream的操作可以串行执行或者并行执行
        常用操作
            5.e.1 Filter 过滤通过一个predicate接口来过滤并只保留符合条件的元素，该操作属于中间操作，所以我们可以在过滤后的结果来应用其他Stream操作（比如forEach）
                        。forEach需要一个函数来对过滤后的元素依次执行。forEach是一个最终操作，所以我们不能在forEach之后来执行其他Stream操作。
            5.e.2 Sort 排序是一个中间操作，返回的是排序好后的Stream。如果你不指定一个自定义的Comparator则会使用默认排序。
            5.e.3 Map 中间操作map会将元素根据指定的Function接口来依次将元素转成另外的对象，下面的示例展示了将字符串转换为大写字符串。
                        你也可以通过map来讲对象转换成其他类型，map返回的Stream类型是根据你map传递进去的函数的返回值决定的
            5.e.4 Match Stream提供了多种匹配操作，允许检测指定的Predicate是否匹配整个Stream。所有的匹配操作都是最终操作，并返回一个boolean类型的值
            5.e.5 Count 计数是一个最终操作，返回Stream中元素的个数，返回值类型是long
            5.e.6 Reduce 这是一个最终操作，允许通过指定的函数来讲stream中的多个元素规约为一个元素，规约后的结果是通过Optional接口表示的
Lambad  匿名内部类的简单写法,接口中只能有一个方法
-----------------------------

主要方法在ArithmeticFactory里面
